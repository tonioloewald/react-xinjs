{"mappings":";;;;;;;;;;ACWO,MAAM,4CAAS,CAAC,UAA4B,eAAoB,EAAE;IACvE,MAAM,OAAO,OAAO,aAAa,WAAW,WAAW,CAAA,GAAA,oBAAM,EAAE;IAC/D,IAAI,OAAO,SAAS,UAAU;QAC5B,QAAQ,MAAM,qDAAqD;QACnE,MAAM,IAAI,MAAM;IAClB;IACA,MAAM,CAAC,OAAO,OAAO,GAAG,CAAA,GAAA,qBAAO,EAAE,CAAA,GAAA,gBAAE,CAAC,CAAC,KAAK,KAAK,YAAY,CAAA,GAAA,gBAAE,CAAC,CAAC,KAAK,GAAG;IACvE,CAAA,GAAA,sBAAQ,EAAE;QACR,MAAM,WAAW;YACf,OAAO,CAAA,GAAA,gBAAE,CAAC,CAAC,KAAK;QAClB;QACA,MAAM,WAAW,CAAA,GAAA,oBAAM,EAAE,MAAM;QAC/B,OAAO;YACL,CAAA,GAAA,sBAAQ,EAAE;QACZ;IACF;IACA,MAAM,WAAW,CAAC;QAChB,CAAA,GAAA,gBAAE,CAAC,CAAC,KAAK,GAAG;IACd;IACA,OAAO;QAAC;QAAO;KAAS;AAC1B","sources":["src/index.ts","src/use-xin.ts"],"sourcesContent":["export { useXin } from './use-xin'","import { useState, useEffect } from 'react'\nimport { xin, observe, unobserve, xinPath, XinTouchableType } from 'xinjs'\n\ntype HookType = [\n  value: any,\n  setValue: (newValue: any) => void\n]\n\n// TODO declare type the way it's declated for useState so that TypeScript\n// passes through type of initialValue to the right thing\n\nexport const useXin = (observed: XinTouchableType, initialValue: any = ''): HookType => {\n  const path = typeof observed === 'string' ? observed : xinPath(observed)\n  if (typeof path !== 'string') {\n    console.error('useXin must either be passed a path or a XinProxy', observed)\n    throw new Error('useXin must either be passed a path or a XinProxy')\n  }\n  const [value, update] = useState(xin[path] !== undefined ? xin[path] : initialValue)\n  useEffect(() => {\n    const observer = (): void => {\n      update(xin[path])\n    }\n    const listener = observe(path, observer)\n    return () => {\n      unobserve(listener)\n    }\n  })\n  const setValue = (value: any): void => {\n    xin[path] = value\n  }\n  return [value, setValue]\n}\n"],"names":[],"version":3,"file":"index.js.map"}